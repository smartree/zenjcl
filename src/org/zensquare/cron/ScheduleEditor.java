/*
 * Zensquare Java Cron Library (ZenJCL)
 * 
 * Copyright (C) 2015 Nick Rechten, All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 *
*/
package org.zensquare.cron;

import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkEvent.EventType;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;

/**
 * A Basic graphical Cron expression builder. This might get documented better
 * at some stage but that would be a sad day because it would mean i've run out
 * of anything else to do =P.
 * 
 * @author nrechten
 */
public class ScheduleEditor extends javax.swing.JPanel implements HyperlinkListener {

    Schedule schedule;
    private Calendar sampleDate;
    private NextUpdateThread updateThread;

    /**
     * Creates new form ScheduleEditor
     */
    public ScheduleEditor(Schedule s) {
        schedule = s;
        initComponents();

        if (txtSchedule.getEditorKit() instanceof HTMLEditorKit) {
            StyleSheet ss = ((HTMLEditorKit) txtSchedule.getEditorKit()).getStyleSheet();
            ss.addRule("a { text-decoration:none; }");
            ss.addRule("body { font-family:Tahoma; font-size:12pt; }");
            ss.addRule(".column_name { color:#222222; font-weight:bold; }");
            ss.addRule(".RangePart { color:#9900bb; }");
            ss.addRule(".new { color:#009900; text-decoration:none; font-family:Courier New; }");
            ss.addRule(".remove { color:#990000; text-decoration:none; font-family:Courier New; }");
            ss.addRule(".rule { padding-left:10px; color:#333333;}");
        }

        txtSchedule.setText(s.toString());
        txtSchedule.addHyperlinkListener(this);

        updateFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        popAddRule = new javax.swing.JPopupMenu();
        muiRangeRule = new javax.swing.JMenuItem();
        muiRepeatingRule = new javax.swing.JMenuItem();
        muiSimpleRule = new javax.swing.JMenuItem();
        popEdit = new javax.swing.JPopupMenu();
        popRemoveRule = new javax.swing.JPopupMenu();
        muiRemoveRule = new javax.swing.JMenuItem();
        pnlIntervalEditor = new javax.swing.JPanel();
        spnIntervalEditor = new javax.swing.JSpinner();
        lblIntervalEditor = new javax.swing.JLabel();
        btnIntervalEditorOK = new javax.swing.JButton();
        btnIntervalEditorCancel = new javax.swing.JButton();
        srlSchedule = new javax.swing.JScrollPane();
        txtSchedule = new javax.swing.JEditorPane();
        txtCronCode = new javax.swing.JTextField();
        srlHumanReadable = new javax.swing.JScrollPane();
        lblHumanReadable = new javax.swing.JTextArea();
        btnParseCron = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        lblNext = new javax.swing.JLabel();

        popAddRule.setLabel("Add New Rule");
        popAddRule.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                popAddRuleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                popAddRuleFocusLost(evt);
            }
        });

        muiRangeRule.setText("new Range Rule");
        muiRangeRule.setFocusable(true);
        muiRangeRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muiRangeRuleActionPerformed(evt);
            }
        });
        popAddRule.add(muiRangeRule);

        muiRepeatingRule.setText("new Repeating Rule");
        muiRepeatingRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muiRepeatingRuleActionPerformed(evt);
            }
        });
        popAddRule.add(muiRepeatingRule);

        muiSimpleRule.setText("new Simple Rule");
        muiSimpleRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muiSimpleRuleActionPerformed(evt);
            }
        });
        popAddRule.add(muiSimpleRule);

        muiRemoveRule.setText("Remove");
        muiRemoveRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muiRemoveRuleActionPerformed(evt);
            }
        });
        popRemoveRule.add(muiRemoveRule);

        pnlIntervalEditor.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pnlIntervalEditor.setMinimumSize(new java.awt.Dimension(300, 41));
        pnlIntervalEditor.setPreferredSize(new java.awt.Dimension(300, 41));
        pnlIntervalEditor.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlIntervalEditorComponentShown(evt);
            }
        });
        pnlIntervalEditor.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                pnlIntervalEditorHierarchyChanged(evt);
            }
        });
        pnlIntervalEditor.setLayout(new java.awt.GridBagLayout());

        spnIntervalEditor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spnIntervalEditor.setMinimumSize(new java.awt.Dimension(80, 24));
        spnIntervalEditor.setPreferredSize(new java.awt.Dimension(80, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlIntervalEditor.add(spnIntervalEditor, gridBagConstraints);

        lblIntervalEditor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblIntervalEditor.setMaximumSize(new java.awt.Dimension(60, 23));
        lblIntervalEditor.setMinimumSize(new java.awt.Dimension(60, 23));
        lblIntervalEditor.setPreferredSize(new java.awt.Dimension(60, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        pnlIntervalEditor.add(lblIntervalEditor, gridBagConstraints);

        btnIntervalEditorOK.setBackground(null);
        btnIntervalEditorOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/zensquare/cron/accept.png"))); // NOI18N
        btnIntervalEditorOK.setContentAreaFilled(false);
        btnIntervalEditorOK.setMaximumSize(new java.awt.Dimension(31, 31));
        btnIntervalEditorOK.setMinimumSize(new java.awt.Dimension(31, 31));
        btnIntervalEditorOK.setPreferredSize(new java.awt.Dimension(31, 31));
        btnIntervalEditorOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMouseExited(evt);
            }
        });
        btnIntervalEditorOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIntervalEditorOKActionPerformed(evt);
            }
        });
        pnlIntervalEditor.add(btnIntervalEditorOK, new java.awt.GridBagConstraints());

        btnIntervalEditorCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/zensquare/cron/delete.png"))); // NOI18N
        btnIntervalEditorCancel.setContentAreaFilled(false);
        btnIntervalEditorCancel.setFocusPainted(false);
        btnIntervalEditorCancel.setMaximumSize(new java.awt.Dimension(31, 31));
        btnIntervalEditorCancel.setMinimumSize(new java.awt.Dimension(31, 31));
        btnIntervalEditorCancel.setPreferredSize(new java.awt.Dimension(31, 31));
        btnIntervalEditorCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMouseExited(evt);
            }
        });
        btnIntervalEditorCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIntervalEditorCancelActionPerformed(evt);
            }
        });
        pnlIntervalEditor.add(btnIntervalEditorCancel, new java.awt.GridBagConstraints());

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        setLayout(new java.awt.GridBagLayout());

        txtSchedule.setEditable(false);
        txtSchedule.setContentType("text/html"); // NOI18N
        txtSchedule.setText("<html>\r\n  <head>\r\n\r\t<style> * { font: Tahoma 11pt; } </style>\n  </head>\r\n  <body>\r\n    <p style=\"margin-top: 0\">\r\nevery minute <a href=\"\">between the <a href=\"\">10th</a> and <a href=\"\">20th</a> minute of the hour</a><br/>\nevery 2 hours <a href=\"\">between <a href=\"\">10am</a> and <a href=\"\">6pm</a> </a><br/>\non the <a href=\"\"><a href=\"\">1st</a>, <a href=\"\">2nd</a> and <a href=\"\">3rd</a></a> day of the month<br/>\nevery 2 months <br/>\n<a href=\"\">between the <a href=\"\">Tuesday</a> and <a href=\"\">Wednesday</a> day of the week</a><br/>\n    </p>\r\n  </body>\r\n</html>\r\n"); // NOI18N
        srlSchedule.setViewportView(txtSchedule);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 459;
        gridBagConstraints.ipady = 192;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.75;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 10);
        add(srlSchedule, gridBagConstraints);

        txtCronCode.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 385;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 10, 11, 0);
        add(txtCronCode, gridBagConstraints);

        srlHumanReadable.setEnabled(false);
        srlHumanReadable.setFocusable(false);

        lblHumanReadable.setColumns(20);
        lblHumanReadable.setRows(5);
        srlHumanReadable.setViewportView(lblHumanReadable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 459;
        gridBagConstraints.ipady = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 10);
        add(srlHumanReadable, gridBagConstraints);

        btnParseCron.setText("Parse Cron");
        btnParseCron.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParseCronActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 11, 10);
        add(btnParseCron, gridBagConstraints);

        jLabel1.setText("Next valid:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);
        add(jLabel1, gridBagConstraints);

        btnNext.setText("Next");
        btnNext.setMaximumSize(new java.awt.Dimension(80, 23));
        btnNext.setMinimumSize(new java.awt.Dimension(80, 23));
        btnNext.setPreferredSize(new java.awt.Dimension(80, 23));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 10);
        add(btnNext, gridBagConstraints);

        btnFirst.setText("First");
        btnFirst.setMaximumSize(new java.awt.Dimension(80, 23));
        btnFirst.setMinimumSize(new java.awt.Dimension(80, 23));
        btnFirst.setPreferredSize(new java.awt.Dimension(80, 23));
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 4, 0, 0);
        add(btnFirst, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 294;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(lblNext, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void popAddRuleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_popAddRuleFocusLost
        //this.popAddRule.setVisible(false);
    }//GEN-LAST:event_popAddRuleFocusLost

    private void popAddRuleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_popAddRuleFocusGained
    }//GEN-LAST:event_popAddRuleFocusGained

    public void updateFields() {
        txtSchedule.setText(schedule.toMarkup());
        txtCronCode.setText(schedule.toCron());
        lblHumanReadable.setText(schedule.toString());
        try {
            sampleDate = null;
            lblNext.setText(new Date(schedule.nextValid()).toString());
        } catch (Exception ex) {
            Logger.getLogger(ScheduleEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void muiRangeRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muiRangeRuleActionPerformed
        schedule.addToField(object_id, "0-0");
        updateFields();
    }//GEN-LAST:event_muiRangeRuleActionPerformed

    private void muiRepeatingRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muiRepeatingRuleActionPerformed
        schedule.addToField(object_id, "*/1");
        updateFields();
    }//GEN-LAST:event_muiRepeatingRuleActionPerformed

    private void muiRemoveRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muiRemoveRuleActionPerformed
        schedule.remove(object_id);
        updateFields();
    }//GEN-LAST:event_muiRemoveRuleActionPerformed

    private void btnIntervalEditorOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIntervalEditorOKActionPerformed
        schedule.setField(object_id, String.valueOf(spnIntervalEditor.getValue()));
        this.popEdit.setVisible(false);
        updateFields();
    }//GEN-LAST:event_btnIntervalEditorOKActionPerformed

    private void btnIntervalEditorCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIntervalEditorCancelActionPerformed
        this.popEdit.setVisible(false);
    }//GEN-LAST:event_btnIntervalEditorCancelActionPerformed

    private void muiSimpleRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muiSimpleRuleActionPerformed
        schedule.addToField(object_id, "0");
        updateFields();
    }//GEN-LAST:event_muiSimpleRuleActionPerformed

    private void btnParseCronActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParseCronActionPerformed
        schedule.parse(txtCronCode.getText());
        updateFields();
    }//GEN-LAST:event_btnParseCronActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

        if (updateThread == null) {
            updateThread = new NextUpdateThread();
            updateThread.start();
        }
    }//GEN-LAST:event_formComponentShown

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        updateThread = null;
    }//GEN-LAST:event_formComponentHidden

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        if (updateThread == null) {
            updateThread = new NextUpdateThread();
            updateThread.start();
        }
    }//GEN-LAST:event_formAncestorAdded

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        sampleDate = null;
        try {
            lblNext.setText(new Date(schedule.nextValid()).toString());
        } catch (Exception ex) {
            Logger.getLogger(ScheduleEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed

        try {
            if (sampleDate == null) {
                sampleDate = new GregorianCalendar();
                sampleDate.setTimeInMillis(schedule.nextValid() + 60000);
            } else {
                sampleDate.setTimeInMillis(schedule.nextValid(sampleDate) + 60000);
            }
            lblNext.setText(new Date(schedule.nextValid(sampleDate)).toString());
        } catch (Exception ex) {
            Logger.getLogger(ScheduleEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    
    private void btnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMouseEntered
        if(evt.getComponent() instanceof JButton){
            ((JButton)evt.getComponent()).setContentAreaFilled(true);
        }
    }//GEN-LAST:event_btnMouseEntered

    private void btnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMouseExited
        if(evt.getComponent() instanceof JButton){
            ((JButton)evt.getComponent()).setContentAreaFilled(false);
        }
    }//GEN-LAST:event_btnMouseExited

    private void pnlIntervalEditorComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlIntervalEditorComponentShown
        btnIntervalEditorCancel.setContentAreaFilled(false);
        btnIntervalEditorOK.setContentAreaFilled(false);
    }//GEN-LAST:event_pnlIntervalEditorComponentShown

    private void pnlIntervalEditorHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_pnlIntervalEditorHierarchyChanged
        btnIntervalEditorCancel.setContentAreaFilled(false);
        btnIntervalEditorOK.setContentAreaFilled(false);
    }//GEN-LAST:event_pnlIntervalEditorHierarchyChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnIntervalEditorCancel;
    private javax.swing.JButton btnIntervalEditorOK;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnParseCron;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextArea lblHumanReadable;
    private javax.swing.JLabel lblIntervalEditor;
    private javax.swing.JLabel lblNext;
    private javax.swing.JMenuItem muiRangeRule;
    private javax.swing.JMenuItem muiRemoveRule;
    private javax.swing.JMenuItem muiRepeatingRule;
    private javax.swing.JMenuItem muiSimpleRule;
    private javax.swing.JPanel pnlIntervalEditor;
    private javax.swing.JPopupMenu popAddRule;
    private javax.swing.JPopupMenu popEdit;
    private javax.swing.JPopupMenu popRemoveRule;
    private javax.swing.JSpinner spnIntervalEditor;
    private javax.swing.JScrollPane srlHumanReadable;
    private javax.swing.JScrollPane srlSchedule;
    private javax.swing.JTextField txtCronCode;
    private javax.swing.JEditorPane txtSchedule;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        
        try { 
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            Logger.getLogger(ScheduleEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JFrame foo = new JFrame();
        foo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Schedule s = new Schedule("0 0 ? * 5-6 *");
        //System.out.println(s.toString());
        foo.add(new ScheduleEditor(s));
        foo.pack();
        foo.setLocationRelativeTo(null);
        foo.setVisible(true);
    }

    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (!(e.getSource() instanceof JComponent)) {
            return;
        }
        if (e.getEventType() != EventType.ACTIVATED) {
            return;
        }

        String[] action = e.getDescription().split(":");
        if (action.length != 2) {
            return;
        }

        if (action[0].equals("add")) {
            this.muiRepeatingRule.setVisible(true);
            this.muiSimpleRule.setVisible(true);
            openPopup(popAddRule, (JComponent) e.getSource(), action[1]);
        }
        if (action[0].equals("remove")) {
            openPopup(popRemoveRule, (JComponent) e.getSource(), action[1]);
        }
        if (action[0].equals("edit")) {
            buildEditMenu((JComponent) e.getSource(), action[1]);
        }
    }

    public void buildEditMenu(JComponent source, String addTo) {
        object_id = Integer.parseInt(addTo);

        popEdit.removeAll();

        //JComboBox cboOptions = new JComboBox(options[1]);
        Object[] info = schedule.getFieldInfo(object_id);

        if (info[12].equals("IncrementPart")) {
            if (info[13].equals("increment")) {
                if(info[1].equals("Year")){
                    this.spnIntervalEditor.setModel(new SpinnerNumberModel(Integer.parseInt(String.valueOf(info[9])), 1, 100, 1));
                } else {
                    this.spnIntervalEditor.setModel(new SpinnerNumberModel(Integer.parseInt(String.valueOf(info[9])), Integer.parseInt(String.valueOf(info[2])), Integer.parseInt(String.valueOf(info[3])), 1));
                }
                this.lblIntervalEditor.setText(info[6] + "s");
                popEdit.add(pnlIntervalEditor);
                openPopup(popEdit, source, addTo);
                return;
            }
            if (info[13].equals("range")) {
                this.muiRepeatingRule.setVisible(false);
                this.muiSimpleRule.setVisible(false);
                openPopup(popAddRule, source, addTo);
                return;
            }
        }
        if (info[8].equals("BasicFieldPart")) {
            String[][] options = schedule.getOptions(object_id);
            //popEdit.add(pnlBasicEditor);
            if (options[1].length > 12) {
                JMenu mnuTemp = null;
                int div = 10;
                if (options[1].length == 24) {
                    div = 12;
                }
                for (int i = 0; i < options[1].length; i++) {
                    if (i % div == 0) {
                        mnuTemp = new JMenu(options[1][i] + " - " + options[1][Math.min(i + div - 1, options[1].length - 1)]);
                        popEdit.add(mnuTemp);
                    }
                    JMenuItem muiTemp = new JMenuItem(options[1][i]);
                    muiTemp.setActionCommand(options[0][i]);
                    muiTemp.addActionListener(bel);
                    mnuTemp.add(muiTemp);
                }
            } else {
                for (int i = 0; i < options[1].length; i++) {
                    JMenuItem muiTemp = new JMenuItem(options[1][i]);
                    muiTemp.setActionCommand(options[0][i]);
                    muiTemp.addActionListener(bel);
                    popEdit.add(muiTemp);
                }
            }
            openPopup(popEdit, source, addTo);
            return;
        }

        //String[][] options = schedule.getOptions(object_id);


        //for(int i = 0; i < options.length; i++){
        //    popEdit.add(new JMenuItem(options[i][1]));
        //}
    }
    private int object_id;

    public void openPopup(JPopupMenu menu, JComponent c, String addTo) {
        Point p1 = MouseInfo.getPointerInfo().getLocation();
        Point p2 = c.getLocationOnScreen();
        object_id = Integer.parseInt(addTo);
        menu.show(c, p1.x - p2.x, p1.y - p2.y);
    }
    BasicEditorListener bel = new BasicEditorListener();

    private class BasicEditorListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            schedule.setField(object_id, String.valueOf(e.getActionCommand()));
            popEdit.setVisible(false);
            updateFields();
        }
    }

    private class NextUpdateThread extends Thread {

        @Override
        public void run() {
            try {
                while (updateThread == this && isVisible()) {
                    if (sampleDate == null) {
                        try {
                            lblNext.setText(new Date(schedule.nextValid()).toString());
                        } catch (Exception ex) {
                        }
                    }
                    Thread.sleep(60000 - (System.currentTimeMillis() % 60000));
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(ScheduleEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
